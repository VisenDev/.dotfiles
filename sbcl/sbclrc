

#-asdf
(if (probe-file #P"~/common-lisp/asdf/build/asdf.lisp")
  (load #P"~/common-lisp/asdf/build/asdf.lisp")
  (load #p"asdf.lisp"))

#-ocicl
(when (probe-file #P"~/.local/share/ocicl/ocicl-runtime.lisp")
  (load #P"~/.local/share/ocicl/ocicl-runtime.lisp"))
(asdf:initialize-source-registry
  (list :source-registry (list :directory (uiop:getcwd)) :inherit-configuration))

#-quicklisp
(let ((quicklisp-init (merge-pathnames "quicklisp/setup.lisp"
                                       (user-homedir-pathname))))
  (when (probe-file quicklisp-init)
    (load quicklisp-init)))

(ql:quickload "linedit")




;(ql:quickload "linedit")

;; Check for --no-linedit command-line option.
(if (member "--no-linedit" sb-ext:*posix-argv* :test 'equal)
    (setf sb-ext:*posix-argv* 
	  (remove "--no-linedit" sb-ext:*posix-argv* :test 'equal))
    (when (interactive-stream-p *terminal-io*)
      (require :sb-aclrepl)
      (require :linedit)
      (funcall (intern "INSTALL-REPL" :linedit) :wrap-current t)))


;;; CONVENIENCE CLI MACROS
(define-symbol-macro
  make
    (let* ((dir (directory #p"*.asd"))
           (file (file-namestring (first dir)))
           (asd-name (intern (subseq file 0 (- (length file) 4))))
           )

      ;;; force recompile once
      (defvar *force-initial-compilation* 
        (progn (asdf:load-system asd-name :force t) t))

      ;;;load system
      (format t "(asdf:load-system '~a)~%" asd-name)
      (asdf:load-system asd-name)
      )
  )

(define-symbol-macro
  ls
  (mapcar #'file-namestring (uiop:directory-files ".")))
